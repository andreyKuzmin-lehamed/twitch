package main

import (
	"fmt"
)

func main() {
	fmt.Println("–û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–∏–º–≤–æ–ª–∞–º —Å—Ç—Ä–æ–∫–∏, –∫–∞–∫ –∫ slice —Å –±–∞–π—Ç–∞–º–∏.")
	var str string = "Hello"
	fmt.Println("–í—Å—è —Å—Ç—Ä–æ–∫–∞:", str)
	fmt.Println("–ë–∞–π—Ç—ã —á–µ—Ä–µ–∑ Printf:")
	fmt.Printf("% x\n", str)
	for i := 0; i < len(str); i++ {
		fmt.Println("–ë–∞–π—Ç:", str[i], "–°—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø:", string(str[i]))
	}

	fmt.Println("–ù–æ –æ–±—Ä–∞—â–∞—è—Å—å –∫ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–∫—É.")
	var str_cir string = "–ü—Ä–∏–≤–µ—Ç"
	fmt.Println("–í—Å—è —Å—Ç—Ä–æ–∫–∞:", str_cir)
	fmt.Println("–ü–æ–ª—É—á–∞—è –±–∞–π—Ç—ã —á–µ—Ä–µ–∑ Printf, –≤–∏–¥–∏–º, —á—Ç–æ –∏—Ö –±–æ–ª—å—à–µ —á–µ–º —Å–∏–º–≤–æ–ª–æ–≤:")
	fmt.Printf("% x\n", str_cir)
	fmt.Println("–¢–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω—è–µ–º Printf, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —é–Ω–∏–∫–æ–¥:")
	fmt.Printf("%+q\n", str_cir)
	for i := 0; i < len(str_cir); i++ {
		fmt.Println("–ë–∞–π—Ç:", str_cir[i], "–°—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø:", string(str_cir[i]))
	}

	fmt.Println("–ö–æ–Ω–≤–µ—Ä—Ç–Ω–µ–º –∏–∑ []byte –≤ []rune, –∏ –ø—Ä–æ–±–µ–∂–∏—Å—è –µ—â—ë —Ä–∞–∑:")
	str_cir_runes := []rune(str_cir)
	for i := 0; i < len(str_cir_runes); i++ {
		fmt.Println("–†—É–Ω–∞:", str_cir_runes[i], "–°—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø:", string(str_cir_runes[i]))
	}

	fmt.Println("–ü–µ—Ä–µ–±–µ—Ä—ë–º —Å—Ç—Ä–æ–∫—É —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π —á–µ—Ä–µ–∑ rune, —Ç—É—Ç –±–µ–∑ –ø—Ä–æ–±–ª–µ–º.")
	for _, r := range str_cir {
		fmt.Println("–†—É–Ω–∞:", r, "–°—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø:", string(r))
	}
}

func strLiterals() {
	str := "üî¥"
	// fmt.Println(str)
	byte_count := 0
	rune_count := 0
	length := len(str)

	for i := 0; i < len(str); i++ {
		fmt.Println("byte –≤ byte –≤–∏–¥–µ:")
		fmt.Println(str[i])
	}

	for i := 0; i < len(str); i++ {
		fmt.Println("byte –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –≤–∏–¥–µ:")
		fmt.Println(string(str[i]))
		byte_count++
	}

	for _, el := range str {
		fmt.Println("rune –≤ rune –≤–∏–¥–µ:")
		fmt.Println(el)
	}

	for _, el := range str {
		fmt.Println("rune –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –≤–∏–¥–µ:")
		fmt.Println(string(el))
		rune_count++
	}

	fmt.Println("–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ \"", str, "\" —Ä–∞–≤–Ω—è–µ—Ç—Å—è ", length)
	fmt.Println("–û—Ç–¥–µ–ª—å–Ω—ã—Ö byte: ", byte_count)
	fmt.Println("–û—Ç–¥–µ–ª—å–Ω—ã—Ö rune: ", rune_count)
}
